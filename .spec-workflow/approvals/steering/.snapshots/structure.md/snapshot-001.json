{
  "id": "snapshot_1758944172946_kg1l5mgqa",
  "approvalId": "approval_1758943983983_structure",
  "approvalTitle": "Naimo 结构文档审批",
  "version": 1,
  "timestamp": "2025-09-27T03:36:12.946Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Project Structure\r\n\r\n## Directory Organization\r\n\r\n```\r\nnaimo_tools/\r\n├── src/                        # 主要源代码目录\r\n│   ├── main/                   # Electron 主进程代码\r\n│   │   ├── config/             # 应用配置管理\r\n│   │   │   ├── app.config.ts   # 应用全局配置\r\n│   │   │   ├── log.config.ts   # 日志系统配置\r\n│   │   │   ├── window.config.ts # 窗口配置\r\n│   │   │   └── window-manager.ts # 窗口管理器\r\n│   │   ├── ipc-router/         # IPC 通信路由系统\r\n│   │   │   ├── core.ts         # 路由核心逻辑\r\n│   │   │   ├── custom-on.ts    # 自定义事件处理\r\n│   │   │   ├── index.ts        # 路由系统入口\r\n│   │   │   ├── utils.ts        # 路由工具函数\r\n│   │   │   └── modules/        # 功能模块路由\r\n│   │   │       ├── app.ts      # 应用相关功能\r\n│   │   │       ├── clipboard.ts # 剪贴板操作\r\n│   │   │       ├── filesystem.ts # 文件系统操作\r\n│   │   │       ├── hotkey.ts   # 快捷键管理\r\n│   │   │       ├── log.ts      # 日志管理\r\n│   │   │       ├── plugin.ts   # 插件系统\r\n│   │   │       ├── screenCapture.ts # 屏幕截图\r\n│   │   │       ├── store.ts    # 数据存储\r\n│   │   │       └── window.ts   # 窗口管理\r\n│   │   ├── preloads/           # 预加载脚本\r\n│   │   │   ├── basic.ts        # 基础预加载脚本\r\n│   │   │   └── webpage-preload.ts # 网页预加载脚本\r\n│   │   ├── services/           # 业务服务层\r\n│   │   │   └── app.service.ts  # 应用服务\r\n│   │   ├── workers/            # 工作线程\r\n│   │   │   └── icon-worker.ts  # 图标处理工作线程\r\n│   │   ├── main.ts             # 主进程入口\r\n│   │   └── utils.ts            # 主进程工具函数\r\n│   ├── renderer/               # Electron 渲染进程代码\r\n│   │   ├── src/                # Vue.js 应用源码\r\n│   │   │   ├── components/     # 通用 Vue 组件\r\n│   │   │   │   ├── AppButton.vue # 按钮组件\r\n│   │   │   │   ├── AppCard.vue # 卡片组件\r\n│   │   │   │   ├── AppModal.vue # 模态框组件\r\n│   │   │   │   ├── ContextMenu.vue # 右键菜单\r\n│   │   │   │   ├── ImageCropper.vue # 图片裁剪器\r\n│   │   │   │   ├── PluginCard.vue # 插件卡片\r\n│   │   │   │   └── WindowFrame.vue # 窗口框架\r\n│   │   │   ├── composables/    # Vue 组合式函数\r\n│   │   │   │   ├── useClipboard.ts # 剪贴板操作\r\n│   │   │   │   ├── useDownload.ts # 下载管理\r\n│   │   │   │   ├── useHotkey.ts # 快捷键绑定\r\n│   │   │   │   ├── useIpcClient.ts # IPC 客户端\r\n│   │   │   │   ├── useLogger.ts # 日志记录\r\n│   │   │   │   ├── useModal.ts # 模态框控制\r\n│   │   │   │   ├── usePlugin.ts # 插件管理\r\n│   │   │   │   └── useStorage.ts # 存储管理\r\n│   │   │   ├── core/           # 核心业务逻辑\r\n│   │   │   │   ├── api/        # API 接口定义\r\n│   │   │   │   ├── config/     # 配置管理\r\n│   │   │   │   ├── constants/  # 常量定义\r\n│   │   │   │   ├── events/     # 事件系统\r\n│   │   │   │   ├── ipc/        # IPC 客户端封装\r\n│   │   │   │   ├── logger/     # 日志系统\r\n│   │   │   │   ├── plugin/     # 插件系统核心\r\n│   │   │   │   ├── storage/    # 存储系统\r\n│   │   │   │   ├── theme/      # 主题系统\r\n│   │   │   │   ├── types/      # 类型定义\r\n│   │   │   │   └── utils/      # 工具函数\r\n│   │   │   ├── modules/        # 功能模块\r\n│   │   │   │   ├── app/        # 应用模块\r\n│   │   │   │   ├── clipboard/  # 剪贴板模块\r\n│   │   │   │   ├── download/   # 下载模块\r\n│   │   │   │   ├── hotkey/     # 快捷键模块\r\n│   │   │   │   ├── logger/     # 日志模块\r\n│   │   │   │   ├── plugin/     # 插件模块\r\n│   │   │   │   ├── screenshot/ # 截图模块\r\n│   │   │   │   ├── search/     # 搜索模块\r\n│   │   │   │   ├── settings/   # 设置模块\r\n│   │   │   │   ├── storage/    # 存储模块\r\n│   │   │   │   └── window/     # 窗口模块\r\n│   │   │   ├── pages/          # 特殊页面\r\n│   │   │   │   └── crop-window/ # 裁剪窗口页面\r\n│   │   │   │       ├── index.html # 裁剪页面模板\r\n│   │   │   │       ├── index.ts # 裁剪页面入口\r\n│   │   │   │       ├── script.ts # 裁剪逻辑\r\n│   │   │   │       └── style.css # 裁剪样式\r\n│   │   │   ├── store/          # Pinia 状态管理\r\n│   │   │   │   ├── app.ts      # 应用状态\r\n│   │   │   │   ├── plugin.ts   # 插件状态\r\n│   │   │   │   └── user.ts     # 用户状态\r\n│   │   │   ├── typings/        # 类型定义文件\r\n│   │   │   │   ├── api.ts      # API 类型\r\n│   │   │   │   ├── ipc.ts      # IPC 类型\r\n│   │   │   │   ├── plugin.ts   # 插件类型\r\n│   │   │   │   └── window.ts   # 窗口类型\r\n│   │   │   ├── utils/          # 渲染进程工具\r\n│   │   │   │   ├── common.ts   # 通用工具\r\n│   │   │   │   ├── format.ts   # 格式化工具\r\n│   │   │   │   ├── dom.ts      # DOM 操作工具\r\n│   │   │   │   └── validate.ts # 验证工具\r\n│   │   │   ├── App.vue         # 根组件\r\n│   │   │   ├── main.ts         # 渲染进程入口\r\n│   │   │   ├── style.css       # 全局样式\r\n│   │   │   └── Test.vue        # 测试组件\r\n│   │   ├── public/             # 静态资源\r\n│   │   │   └── log-viewer.html # 日志查看器页面\r\n│   │   ├── index.html          # 主页面模板\r\n│   │   ├── package.json        # 渲染进程依赖\r\n│   │   ├── tsconfig.*.json     # TypeScript 配置\r\n│   │   └── vite.config.ts      # Vite 构建配置\r\n│   ├── shared/                 # 共享代码\r\n│   │   ├── typings/            # 共享类型定义\r\n│   │   │   ├── electron-store.d.ts # Store 类型\r\n│   │   │   ├── global.d.ts     # 全局类型\r\n│   │   │   └── ipc-routes.ts   # IPC 路由类型\r\n│   │   ├── ipc-router-client.ts # IPC 客户端\r\n│   │   ├── types.ts            # 共享类型\r\n│   │   └── utils.ts            # 共享工具\r\n│   └── libs/                   # 自定义库\r\n│       ├── app-search/         # 应用搜索库\r\n│       │   ├── icon-extractor.ts # 图标提取\r\n│       │   ├── index.ts        # 库入口\r\n│       │   └── package.json    # 库配置\r\n│       ├── auto-puppeteer/     # 自动化库\r\n│       │   ├── main.ts         # 主进程模块\r\n│       │   ├── renderer.ts     # 渲染进程模块\r\n│       │   ├── typings.ts      # 类型定义\r\n│       │   └── package.json    # 库配置\r\n│       ├── download-manager/   # 下载管理库\r\n│       │   ├── main.ts         # 主进程模块\r\n│       │   ├── renderer.ts     # 渲染进程模块\r\n│       │   ├── typings.ts      # 类型定义\r\n│       │   └── package.json    # 库配置\r\n│       └── unhandled/          # 错误处理库\r\n│           ├── common.ts       # 通用处理\r\n│           ├── config.ts       # 配置\r\n│           ├── main.ts         # 主进程处理\r\n│           └── renderer.ts     # 渲染进程处理\r\n├── scripts/                    # 构建和开发脚本\r\n│   ├── build.js                # 生产环境构建\r\n│   ├── dev.js                  # 开发环境启动\r\n│   ├── generate-ipc-types.js   # IPC 类型生成\r\n│   ├── test-package.js         # 包测试\r\n│   └── version.js              # 版本管理\r\n├── plugins/                    # 插件目录\r\n│   ├── ocr-trans-plugin/       # OCR 翻译插件\r\n│   └── translate-plugin/       # 翻译插件\r\n├── docs/                       # 项目文档\r\n├── setup/                      # 安装包配置\r\n├── dist/                       # 构建输出\r\n├── out/                        # 打包输出\r\n└── 配置文件                     # 项目配置文件\r\n    ├── package.json            # 项目依赖和脚本\r\n    ├── tsconfig.json           # TypeScript 配置\r\n    ├── forge.config.js         # Electron Forge 配置\r\n    ├── vite.config.ts          # Vite 配置\r\n    └── pnpm-workspace.yaml     # PNPM 工作空间配置\r\n```\r\n\r\n## Naming Conventions\r\n\r\n### Files\r\n\r\n- **组件文件**: `PascalCase.vue` (如 `AppButton.vue`, `PluginCard.vue`)\r\n- **服务文件**: `camelCase.ts` (如 `app.service.ts`, `plugin.service.ts`)\r\n- **工具文件**: `camelCase.ts` (如 `utils.ts`, `format.ts`, `validate.ts`)\r\n- **配置文件**: `kebab-case.ts` (如 `app.config.ts`, `window.config.ts`)\r\n- **类型文件**: `camelCase.ts` 或 `kebab-case.d.ts` (如 `types.ts`, `global.d.ts`)\r\n- **模块文件**: `camelCase.ts` (如 `index.ts`, `main.ts`, `renderer.ts`)\r\n\r\n### Code\r\n\r\n- **类/接口**: `PascalCase` (如 `IpcRouter`, `WindowManager`, `PluginConfig`)\r\n- **函数/方法**: `camelCase` (如 `getIpcRouter`, `registerModule`, `createWindow`)\r\n- **常量**: `UPPER_SNAKE_CASE` (如 `DEFAULT_CONFIG`, `MAX_FILE_SIZE`)\r\n- **变量**: `camelCase` (如 `windowManager`, `pluginList`, `userConfig`)\r\n- **枚举**: `PascalCase` (如 `LogLevel`, `WindowType`, `PluginStatus`)\r\n\r\n### Directories\r\n\r\n- **功能模块**: `kebab-case` (如 `ipc-router`, `auto-puppeteer`, `crop-window`)\r\n- **组件目录**: `camelCase` (如 `components`, `composables`, `modules`)\r\n- **配置目录**: `camelCase` (如 `config`, `typings`, `utils`)\r\n\r\n## Import Patterns\r\n\r\n### Import Order\r\n\r\n1. **Node.js 内置模块**: `import { app } from 'electron'`\r\n2. **第三方依赖**: `import Vue from 'vue'`, `import log from 'electron-log'`\r\n3. **内部模块 (绝对路径)**: `import { getIpcRouter } from '@main/ipc-router'`\r\n4. **内部模块 (相对路径)**: `import { utils } from './utils'`\r\n5. **类型导入**: `import type { IpcRouter } from './types'`\r\n6. **样式导入**: `import './style.css'`\r\n\r\n### Module/Package Organization\r\n\r\n```typescript\r\n// 绝对路径导入 (推荐用于跨模块引用)\r\nimport { IpcRouter } from \"@main/ipc-router/core\";\r\nimport { WindowManager } from \"@main/config/window-manager\";\r\nimport { usePlugin } from \"@renderer/composables/usePlugin\";\r\n\r\n// 相对路径导入 (用于同模块内引用)\r\nimport { RouteKeyConverter } from \"./utils\";\r\nimport { RouteInfo } from \"../types\";\r\n\r\n// 类型专用导入\r\nimport type { Plugin, PluginConfig } from \"@shared/types\";\r\n\r\n// 动态导入 (用于插件系统)\r\nconst plugin = await import(`./plugins/${pluginName}`);\r\n```\r\n\r\n### Path Alias Configuration\r\n\r\n```typescript\r\n// tsconfig.json 路径映射\r\n\"paths\": {\r\n  \"@main/*\": [\"src/main/*\"],\r\n  \"@renderer/*\": [\"src/renderer/*\"],\r\n  \"@shared/*\": [\"src/shared/*\"],\r\n  \"@libs/*\": [\"src/libs/*\"]\r\n}\r\n```\r\n\r\n## Code Structure Patterns\r\n\r\n### Module/Class Organization\r\n\r\n```typescript\r\n// 1. 导入声明 (按上述顺序)\r\nimport { ipcMain } from \"electron\";\r\nimport log from \"electron-log\";\r\nimport { RouteKeyConverter } from \"./utils\";\r\nimport type { RouteInfo } from \"./types\";\r\n\r\n// 2. 类型定义和接口\r\nexport interface RouteInfo {\r\n  moduleName: string;\r\n  functionName: string;\r\n  comment: string;\r\n  registeredAt: Date;\r\n}\r\n\r\n// 3. 常量和配置\r\nconst DEFAULT_TIMEOUT = 5000;\r\nconst MAX_ROUTES = 1000;\r\n\r\n// 4. 主要实现 (类或函数)\r\nexport class IpcRouter {\r\n  private static instance: IpcRouter;\r\n  private handlers = new Map<string, Function>();\r\n\r\n  // 构造函数\r\n  private constructor() {}\r\n\r\n  // 静态方法\r\n  static getInstance(): IpcRouter {\r\n    // 实现单例模式\r\n  }\r\n\r\n  // 公共方法\r\n  register(moduleName: string, functionName: string, handler: Function): void {\r\n    // 注册路由\r\n  }\r\n\r\n  // 私有方法\r\n  private validateRoute(routeKey: string): boolean {\r\n    // 验证路由\r\n  }\r\n}\r\n\r\n// 5. 工具函数\r\nfunction createRouteKey(moduleName: string, functionName: string): string {\r\n  return `${moduleName}-${functionName}`;\r\n}\r\n\r\n// 6. 默认导出和命名导出\r\nexport { IpcRouter };\r\nexport default IpcRouter;\r\n```\r\n\r\n### Function/Method Organization\r\n\r\n```typescript\r\nexport async function downloadFile(\r\n  url: string,\r\n  destination: string\r\n): Promise<string> {\r\n  // 1. 输入验证\r\n  if (!url || !destination) {\r\n    throw new Error(\"URL and destination are required\");\r\n  }\r\n\r\n  // 2. 变量声明和初始化\r\n  const startTime = Date.now();\r\n  let downloadPath: string;\r\n\r\n  try {\r\n    // 3. 核心业务逻辑\r\n    log.info(`开始下载文件: ${url}`);\r\n    downloadPath = await performDownload(url, destination);\r\n\r\n    // 4. 成功处理\r\n    const duration = Date.now() - startTime;\r\n    log.info(`文件下载完成: ${downloadPath} (${duration}ms)`);\r\n\r\n    return downloadPath;\r\n  } catch (error) {\r\n    // 5. 错误处理\r\n    log.error(`文件下载失败: ${url}`, error);\r\n    throw error;\r\n  }\r\n}\r\n```\r\n\r\n### File Organization Principles\r\n\r\n```typescript\r\n// 每个文件遵循单一职责原则\r\n// 例如：src/main/ipc-router/core.ts 只负责 IPC 路由核心逻辑\r\n\r\n// 公共 API 放在文件顶部或专用的 index.ts\r\nexport { IpcRouter, getIpcRouter } from \"./core\";\r\nexport type { RouteInfo } from \"./types\";\r\n\r\n// 实现细节在各自的文件中隐藏\r\n// 不直接导出内部使用的工具函数和类\r\n```\r\n\r\n## Code Organization Principles\r\n\r\n### 1. Single Responsibility (单一职责)\r\n\r\n- **文件级别**: 每个文件专注于一个特定功能或概念\r\n  - `ipc-router/core.ts`: 只处理 IPC 路由注册和管理\r\n  - `config/window-manager.ts`: 只处理窗口创建和管理\r\n  - `composables/usePlugin.ts`: 只处理插件相关的组合式逻辑\r\n\r\n### 2. Modularity (模块化)\r\n\r\n- **功能模块**: 按业务功能划分模块 (`plugin/`, `download/`, `screenshot/`)\r\n- **技术模块**: 按技术层次划分模块 (`ipc-router/`, `config/`, `services/`)\r\n- **可重用性**: 提取通用逻辑到 `utils/`, `composables/`, `shared/`\r\n\r\n### 3. Testability (可测试性)\r\n\r\n- **依赖注入**: 通过参数传递依赖，而不是硬编码\r\n- **函数式设计**: 纯函数优先，减少副作用\r\n- **接口抽象**: 使用接口定义契约，便于模拟和测试\r\n\r\n### 4. Consistency (一致性)\r\n\r\n- **命名规范**: 整个项目遵循统一的命名约定\r\n- **文件结构**: 相似功能的文件使用相同的组织结构\r\n- **代码风格**: 使用 ESLint 和 Prettier 确保代码风格一致\r\n\r\n## Module Boundaries\r\n\r\n### Core vs Plugins\r\n\r\n- **Core**: `src/main/`, `src/renderer/`, `src/shared/` - 核心应用逻辑\r\n- **Plugins**: `plugins/` - 可选的扩展功能，运行在沙盒环境中\r\n- **边界**: 插件通过标准化 API 与核心交互，不能直接访问核心内部实现\r\n\r\n### Public API vs Internal\r\n\r\n- **Public API**:\r\n  - `src/shared/types.ts` - 对外暴露的类型定义\r\n  - `src/main/ipc-router/modules/` - IPC 路由模块 (对渲染进程可见)\r\n  - `src/renderer/composables/` - 组合式函数 (对组件可见)\r\n- **Internal**:\r\n  - `src/main/services/` - 内部服务实现\r\n  - `src/renderer/core/` - 内部业务逻辑\r\n  - `**/utils.ts` - 模块内部工具函数\r\n\r\n### Process Isolation\r\n\r\n- **Main Process**: `src/main/` - 系统 API 访问，生命周期管理\r\n- **Renderer Process**: `src/renderer/` - UI 逻辑，用户交互\r\n- **Preload Scripts**: `src/main/preloads/` - 安全的进程间桥接\r\n- **边界**: 通过 IPC 通信，严格的上下文隔离\r\n\r\n### Feature Modules\r\n\r\n- **Independent**: 每个模块可以独立开发和测试\r\n- **Minimal Dependencies**: 模块间依赖最小化，避免循环依赖\r\n- **Clear Interfaces**: 模块间通过明确的接口交互\r\n\r\n### Dependencies Direction\r\n\r\n```\r\n渲染进程 UI 层\r\n    ↓ (使用)\r\n渲染进程 Composables 层\r\n    ↓ (使用)\r\n渲染进程 Core 层\r\n    ↓ (IPC 调用)\r\n主进程 IPC Router 层\r\n    ↓ (调用)\r\n主进程 Services 层\r\n    ↓ (使用)\r\n共享 Utils 和 Types 层\r\n```\r\n\r\n## Code Size Guidelines\r\n\r\n### File Size\r\n\r\n- **组件文件**: 最大 300 行 (Vue SFC)\r\n- **逻辑文件**: 最大 500 行 (TypeScript)\r\n- **配置文件**: 最大 200 行\r\n- **工具文件**: 最大 150 行\r\n\r\n### Function/Method Size\r\n\r\n- **普通函数**: 最大 50 行\r\n- **复杂业务函数**: 最大 100 行\r\n- **初始化函数**: 最大 80 行\r\n- **工具函数**: 最大 30 行\r\n\r\n### Class/Module Complexity\r\n\r\n- **类的方法数**: 最大 20 个公共方法\r\n- **函数参数数**: 最大 5 个参数 (推荐使用对象参数)\r\n- **圈复杂度**: 单个函数最大 10\r\n\r\n### Nesting Depth\r\n\r\n- **条件嵌套**: 最大 3 层\r\n- **循环嵌套**: 最大 2 层\r\n- **回调嵌套**: 使用 async/await 避免深层嵌套\r\n\r\n## Dashboard/Monitoring Structure\r\n\r\n### Spec Workflow Dashboard\r\n\r\n```\r\n.spec-workflow/                 # Spec 工作流相关\r\n├── templates/                  # 文档模板\r\n├── user-templates/             # 用户自定义模板\r\n├── steering/                   # 指导文档\r\n├── approvals/                  # 审批记录\r\n├── specs/                      # 规格文档\r\n└── archive/                    # 归档文件\r\n```\r\n\r\n### Log Viewer Dashboard\r\n\r\n```\r\nsrc/renderer/public/\r\n└── log-viewer.html             # 独立的日志查看器\r\n    ├── HTML 结构              # 日志显示界面\r\n    ├── CSS 样式               # 日志查看器样式\r\n    └── JavaScript 逻辑        # 日志过滤和搜索\r\n```\r\n\r\n### Development Dashboard\r\n\r\n```\r\n开发环境监控:\r\n- Vite 开发服务器状态\r\n- TypeScript 编译状态\r\n- Electron 进程状态\r\n- 热重载状态监控\r\n```\r\n\r\n### Separation of Concerns\r\n\r\n- **Spec Workflow**: 独立的文档管理系统，不影响核心应用\r\n- **Log Viewer**: 可选的调试工具，可以独立运行\r\n- **Development Tools**: 开发时工具，生产环境自动禁用\r\n- **Plugin Dashboard**: 插件管理界面，与核心 UI 分离\r\n\r\n## Documentation Standards\r\n\r\n### API Documentation\r\n\r\n- **所有公共 API 必须有 JSDoc 注释**\r\n\r\n```typescript\r\n/**\r\n * 注册 IPC 路由处理器\r\n * @param moduleName 模块名称 (如 'app', 'window')\r\n * @param functionName 函数名称\r\n * @param handler 处理函数\r\n * @param comment 可选的注释说明\r\n */\r\nregister(moduleName: string, functionName: string, handler: Function, comment?: string): void\r\n```\r\n\r\n### Inline Comments\r\n\r\n- **复杂逻辑必须有注释说明**\r\n\r\n```typescript\r\n// 使用 ts-morph 解析 TypeScript 源码，提取函数签名和注释\r\nconst sourceFile = project.addSourceFileAtPath(filePath);\r\nconst exportedDeclarations = sourceFile.getExportedDeclarations();\r\n\r\n// 遍历所有导出的函数，生成类型定义\r\nfor (const [name, declarations] of exportedDeclarations) {\r\n  // 处理函数声明...\r\n}\r\n```\r\n\r\n### Module Documentation\r\n\r\n- **主要模块需要 README 文件**\r\n  - `src/libs/download-manager/README.md`\r\n  - `src/libs/auto-puppeteer/README.md`\r\n  - `docs/` 目录下的功能文档\r\n\r\n### Code Examples\r\n\r\n- **复杂功能提供使用示例**\r\n\r\n```typescript\r\n// 使用示例：注册新的 IPC 路由\r\nconst router = getIpcRouter();\r\nrouter.register(\"myModule\", \"myFunction\", async (param1, param2) => {\r\n  return `Hello ${param1} and ${param2}`;\r\n});\r\n\r\n// 渲染进程调用\r\nconst result = await naimo.router.myModuleMyFunction(\"World\", \"Universe\");\r\n```\r\n\r\n### Language-specific Conventions\r\n\r\n- **TypeScript**: 使用 JSDoc 标准\r\n- **Vue**: 使用 Vue 组件文档规范\r\n- **Markdown**: 遵循 CommonMark 标准\r\n- **配置文件**: 内联注释解释关键配置项\r\n",
  "fileStats": {
    "size": 20788,
    "lines": 536,
    "lastModified": "2025-09-27T03:34:24.306Z"
  },
  "comments": []
}