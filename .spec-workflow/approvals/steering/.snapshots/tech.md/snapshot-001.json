{
  "id": "snapshot_1758944173313_4akolfvxi",
  "approvalId": "approval_1758943632462_tech",
  "approvalTitle": "Naimo 技术文档审批",
  "version": 1,
  "timestamp": "2025-09-27T03:36:13.313Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Technology Stack\r\n\r\n## Project Type\r\n\r\nNaimo 是一个跨平台桌面应用开发模板，基于 Electron 框架构建，采用现代化的 Web 技术栈来开发原生桌面应用程序。项目同时也是一个完整的开发工具平台，提供插件系统、自动化工具和企业级功能。\r\n\r\n## Core Technologies\r\n\r\n### Primary Language(s)\r\n\r\n- **TypeScript 5.9.2**: 主要开发语言，提供类型安全和现代 JavaScript 特性\r\n- **JavaScript ES2022**: 目标编译版本，支持最新的 ECMAScript 特性\r\n- **Node.js**: 主进程运行时环境（通过 Electron）\r\n\r\n### Runtime/Compiler\r\n\r\n- **Electron 38.0.0**: 跨平台桌面应用框架，结合 Chromium 和 Node.js\r\n- **Vite 7.1.5**: 快速的前端构建工具，支持热重载和 ESM\r\n- **TypeScript Compiler**: 类型检查和代码编译\r\n- **ESBuild**: Vite 内置的快速 JavaScript 打包器\r\n\r\n### Language-specific Tools\r\n\r\n- **pnpm**: 高效的包管理器，支持 workspace 和链接管理\r\n- **ts-morph 27.0.0**: TypeScript 代码分析和生成工具，用于自动化 IPC 类型生成\r\n- **Electron Forge 7.9.0**: Electron 应用打包、分发和开发工具链\r\n\r\n### Key Dependencies/Libraries\r\n\r\n#### 前端框架和 UI\r\n\r\n- **Vue 3.5.18**: 渐进式 JavaScript 框架，采用 Composition API\r\n- **Vue Router 4.5.1**: Vue.js 官方路由管理器\r\n- **Pinia 3.0.3**: Vue 3 官方状态管理库\r\n- **TailwindCSS 4.1.13**: 实用优先的 CSS 框架\r\n- **@vueuse/core 13.9.0**: Vue Composition API 实用程序集合\r\n\r\n#### 开发工具和插件\r\n\r\n- **unplugin-auto-import**: Vue APIs 和组件自动导入\r\n- **unplugin-vue-components**: Vue 组件自动注册\r\n- **unplugin-icons**: 图标系统，支持多种图标库\r\n- **@iconify-json/mdi**: Material Design Icons 图标集\r\n\r\n#### 功能增强库\r\n\r\n- **lodash-es 4.17.21**: JavaScript 实用工具库\r\n- **axios 1.12.2**: HTTP 客户端，支持请求重试\r\n- **hotkeys-js 3.13.15**: 键盘快捷键管理\r\n- **mitt 3.0.1**: 轻量级事件发射器\r\n- **vue-draggable-plus**: Vue 3 拖拽组件\r\n- **pinyin-pro 3.27.0**: 中文拼音转换库\r\n\r\n#### Electron 生态\r\n\r\n- **electron-log 5.4.3**: 多进程日志管理系统\r\n- **electron-store 10.1.0**: 数据持久化存储\r\n- **update-electron-app 3.1.1**: 自动更新系统\r\n\r\n#### 专用库（Workspace 模块）\r\n\r\n- **download-manager**: 自定义下载管理库，基于 electron-dl-manager\r\n- **auto-puppeteer**: 自动化库，集成 Puppeteer 和 Cheerio\r\n- **app-search**: 应用搜索和图标提取工具\r\n\r\n### Application Architecture\r\n\r\nNaimo 采用**模块化多进程架构**，主要包含以下层次：\r\n\r\n#### 1. 多进程架构\r\n\r\n- **主进程 (Main Process)**: 负责应用生命周期、窗口管理、系统 API 调用\r\n- **渲染进程 (Renderer Process)**: 运行 Vue.js 应用，处理用户界面\r\n- **预加载脚本 (Preload Scripts)**: 安全桥接主进程和渲染进程\r\n\r\n#### 2. IPC 通信架构\r\n\r\n- **类型安全的 IPC 路由系统**: 基于 ts-morph 自动生成类型定义\r\n- **双重命名支持**: 同时支持驼峰式和短横线式命名规范\r\n- **模块化路由注册**: 按功能模块组织 IPC 处理器\r\n\r\n#### 3. 插件系统架构\r\n\r\n- **动态插件加载**: 支持运行时插件安装和卸载\r\n- **沙盒环境**: 插件在独立的安全环境中运行\r\n- **标准化 API**: 统一的插件开发接口\r\n\r\n#### 4. 分层架构模式\r\n\r\n```\r\n┌─────────────────────────────────────┐\r\n│           Vue.js 应用层              │  (UI 组件、页面路由)\r\n├─────────────────────────────────────┤\r\n│           状态管理层 (Pinia)          │  (全局状态、缓存)\r\n├─────────────────────────────────────┤\r\n│           IPC 客户端层               │  (类型安全的 API 调用)\r\n├─────────────────────────────────────┤\r\n│           IPC 路由层                │  (请求路由和处理)\r\n├─────────────────────────────────────┤\r\n│           服务层                    │  (业务逻辑、外部集成)\r\n├─────────────────────────────────────┤\r\n│           系统 API 层               │  (Electron APIs、Node.js)\r\n└─────────────────────────────────────┘\r\n```\r\n\r\n### Data Storage\r\n\r\n#### Primary Storage\r\n\r\n- **electron-store**: JSON 格式的配置和用户数据存储\r\n- **File System**: 临时文件、缓存、日志文件存储\r\n- **Memory Storage**: 运行时状态和会话数据\r\n\r\n#### Caching\r\n\r\n- **Memory Cache**: Pinia 状态管理中的响应式缓存\r\n- **File Cache**: 下载文件、图标、临时数据的磁盘缓存\r\n- **HTTP Cache**: Axios 请求级别的缓存策略\r\n\r\n#### Data Formats\r\n\r\n- **JSON**: 配置文件、状态数据、IPC 通信\r\n- **Binary**: 图标文件、下载内容、压缩数据\r\n- **Text**: 日志文件、临时数据\r\n\r\n### External Integrations\r\n\r\n#### APIs 和服务\r\n\r\n- **GitHub API**: 自动更新、版本检查\r\n- **翻译服务**: 多语言翻译插件支持\r\n- **OCR 服务**: 图像文本识别功能\r\n\r\n#### Protocols\r\n\r\n- **HTTP/HTTPS**: RESTful API 通信\r\n- **File Protocol**: 本地文件访问\r\n- **IPC Protocol**: 进程间通信\r\n\r\n#### Authentication\r\n\r\n- **API Keys**: 第三方服务认证\r\n- **OAuth**: 可选的第三方登录集成\r\n- **本地认证**: 应用级别的安全控制\r\n\r\n### Monitoring & Dashboard Technologies\r\n\r\n#### Dashboard Framework\r\n\r\n- **Vue 3 + TypeScript**: 主要的前端技术栈\r\n- **TailwindCSS**: 快速样式开发\r\n- **Vite**: 开发服务器和构建工具\r\n\r\n#### Real-time Communication\r\n\r\n- **IPC Events**: 主进程和渲染进程的实时事件通信\r\n- **File Watching**: 配置文件和资源的实时监控\r\n- **WebSocket**: 可选的外部服务实时通信\r\n\r\n#### Visualization Libraries\r\n\r\n- **unplugin-icons**: 丰富的图标系统\r\n- **CSS Animations**: 原生动画效果\r\n- **Vue Transitions**: 页面和组件过渡效果\r\n\r\n#### State Management\r\n\r\n- **Pinia**: 集中式状态管理\r\n- **VueUse**: 组合式 API 状态管理\r\n- **electron-store**: 持久化存储作为数据源\r\n\r\n## Development Environment\r\n\r\n### Build & Development Tools\r\n\r\n#### Build System\r\n\r\n- **Vite**: 主要构建工具，支持 ES 模块和快速热重载\r\n- **Electron Forge**: Electron 应用的打包和分发\r\n- **TypeScript Compiler**: 类型检查和 JavaScript 代码生成\r\n- **Rollup**: Vite 内置的生产环境打包器\r\n\r\n#### Package Management\r\n\r\n- **pnpm Workspace**: 单体仓库管理，支持多包开发\r\n- **npm Scripts**: 自动化任务和命令管理\r\n- **Cross-env**: 跨平台环境变量管理\r\n\r\n#### Development Workflow\r\n\r\n- **Hot Module Replacement (HMR)**: Vite 提供的快速热重载\r\n- **Watch Mode**: TypeScript 和构建工具的文件监控\r\n- **Multi-Entry**: 支持多个 HTML 入口点（主应用、裁剪窗口、日志查看器）\r\n\r\n### Code Quality Tools\r\n\r\n#### Static Analysis\r\n\r\n- **TypeScript**: 静态类型检查和错误预防\r\n- **ESLint**: 代码质量和风格检查（配置可扩展）\r\n- **ts-morph**: 深度 TypeScript 代码分析\r\n\r\n#### Formatting\r\n\r\n- **Prettier**: 代码格式化（推荐配置）\r\n- **EditorConfig**: 编辑器一致性配置\r\n\r\n#### Testing Framework\r\n\r\n- **单元测试**: 支持 Jest 或 Vitest（可配置）\r\n- **E2E 测试**: 支持 Playwright for Electron\r\n- **类型测试**: TypeScript 编译时类型验证\r\n\r\n#### Documentation\r\n\r\n- **JSDoc**: 代码内文档注释\r\n- **Markdown**: 项目文档和说明文件\r\n- **自动生成**: IPC 类型定义自动生成文档\r\n\r\n### Version Control & Collaboration\r\n\r\n#### VCS\r\n\r\n- **Git**: 版本控制系统\r\n- **GitHub**: 代码托管和协作平台\r\n\r\n#### Branching Strategy\r\n\r\n- **GitHub Flow**: 简化的分支策略，适合持续集成\r\n- **Feature Branches**: 功能开发分支\r\n- **Release Tags**: 版本标签管理\r\n\r\n#### Code Review Process\r\n\r\n- **Pull Request**: GitHub 标准代码审查流程\r\n- **自动化检查**: CI/CD 集成的代码质量检查\r\n- **Branch Protection**: 主分支保护规则\r\n\r\n### Dashboard Development\r\n\r\n#### Live Reload\r\n\r\n- **Vite HMR**: 快速的模块热替换\r\n- **Electron Reload**: 主进程代码更改后自动重启\r\n- **Multi-Process Debugging**: 同时调试主进程和渲染进程\r\n\r\n#### Port Management\r\n\r\n- **Dynamic Port Allocation**: 自动检测可用端口\r\n- **Configurable Ports**: package.json 中的端口配置\r\n- **Proxy Configuration**: 开发环境的代理设置\r\n\r\n#### Multi-Instance Support\r\n\r\n- **Multiple Windows**: 支持多窗口应用开发\r\n- **Process Isolation**: 不同功能模块的进程隔离\r\n- **Resource Sharing**: 进程间资源共享机制\r\n\r\n## Deployment & Distribution\r\n\r\n### Target Platform(s)\r\n\r\n- **Windows**: 主要目标平台，支持 x64 架构\r\n- **macOS**: 跨平台支持，支持 Intel 和 Apple Silicon\r\n- **Linux**: Debian/Ubuntu 和 Red Hat 系列支持\r\n\r\n### Distribution Method\r\n\r\n- **GitHub Releases**: 自动化发布到 GitHub\r\n- **Direct Download**: 用户直接下载安装包\r\n- **NSIS Installer**: Windows 自定义安装程序\r\n- **App Store**: 可选的应用商店分发\r\n\r\n### Installation Requirements\r\n\r\n- **Operating System**: Windows 10/11, macOS 10.15+, Linux (modern distributions)\r\n- **Memory**: 最低 4GB RAM，推荐 8GB+\r\n- **Storage**: 最低 500MB 可用空间\r\n- **Network**: 互联网连接（用于更新和插件下载）\r\n\r\n### Update Mechanism\r\n\r\n- **Automatic Updates**: update-electron-app 自动更新系统\r\n- **GitHub Releases**: 基于 GitHub Releases 的更新检测\r\n- **Delta Updates**: 增量更新支持（可配置）\r\n- **Manual Updates**: 用户手动检查和安装更新\r\n\r\n## Technical Requirements & Constraints\r\n\r\n### Performance Requirements\r\n\r\n- **启动时间**: 应用启动时间 < 5秒\r\n- **响应时间**: IPC 调用响应时间 < 100ms\r\n- **内存使用**: 基础内存占用 < 200MB\r\n- **热重载**: 开发环境代码更改响应 < 3秒\r\n\r\n### Compatibility Requirements\r\n\r\n#### Platform Support\r\n\r\n- **Windows**: Windows 10 version 1903+ (64-bit)\r\n- **macOS**: macOS 10.15 Catalina+\r\n- **Linux**: Ubuntu 18.04+, CentOS 8+, Fedora 32+\r\n\r\n#### Dependency Versions\r\n\r\n- **Node.js**: >= 18.0.0（通过 Electron 内置）\r\n- **Chromium**: 基于 Electron 38.0.0 内置版本\r\n- **V8 Engine**: 跟随 Chromium 版本\r\n\r\n#### Standards Compliance\r\n\r\n- **ECMAScript 2022**: JavaScript 语言标准\r\n- **W3C Web Standards**: 渲染进程中的 Web API\r\n- **Electron Security**: 遵循 Electron 安全最佳实践\r\n\r\n### Security & Compliance\r\n\r\n#### Security Requirements\r\n\r\n- **Context Isolation**: 预加载脚本的上下文隔离\r\n- **Node Integration**: 禁用渲染进程的直接 Node.js 访问\r\n- **Content Security Policy**: 严格的 CSP 头部设置\r\n- **Code Signing**: 生产环境代码签名\r\n\r\n#### Compliance Standards\r\n\r\n- **Privacy**: 用户数据本地存储，无强制性数据收集\r\n- **Open Source**: MIT 许可证，符合开源标准\r\n- **Security**: 定期依赖更新和安全审计\r\n\r\n#### Threat Model\r\n\r\n- **Code Injection**: 通过 CSP 和上下文隔离防护\r\n- **Privilege Escalation**: 最小权限原则和沙盒机制\r\n- **Data Exfiltration**: 本地数据存储和加密传输\r\n\r\n### Scalability & Reliability\r\n\r\n#### Expected Load\r\n\r\n- **用户规模**: 支持数千并发用户（开发者）\r\n- **文件处理**: 支持大文件下载和处理（GB 级别）\r\n- **插件数量**: 支持 50+ 插件并发运行\r\n\r\n#### Availability Requirements\r\n\r\n- **本地可用性**: 99.9% 离线可用性\r\n- **更新可用性**: 99% 更新服务可用性\r\n- **恢复时间**: 应用崩溃恢复时间 < 10秒\r\n\r\n#### Growth Projections\r\n\r\n- **功能扩展**: 模块化架构支持功能横向扩展\r\n- **性能扩展**: 多进程架构支持性能纵向扩展\r\n- **生态扩展**: 插件系统支持第三方开发者扩展\r\n\r\n## Technical Decisions & Rationale\r\n\r\n### Decision Log\r\n\r\n#### 1. **Electron + Vue 3 + TypeScript 技术栈选择**\r\n\r\n**决策原因**:\r\n\r\n- Electron 提供跨平台能力，无需为每个平台单独开发\r\n- Vue 3 Composition API 提供更好的逻辑复用和类型推导\r\n- TypeScript 确保代码质量和开发效率\r\n- 生态系统成熟，社区支持良好\r\n\r\n**考虑的替代方案**: Tauri (Rust), Neutralino.js, PWA\r\n**权衡**: 选择成熟度和生态系统优势，接受较大的应用体积\r\n\r\n#### 2. **Vite 作为构建工具**\r\n\r\n**决策原因**:\r\n\r\n- 极快的开发服务器启动和热重载\r\n- 原生 ES 模块支持，更好的开发体验\r\n- 优秀的 Vue 3 和 TypeScript 支持\r\n- 现代化的插件生态系统\r\n\r\n**考虑的替代方案**: Webpack, Rollup, Parcel\r\n**权衡**: 优先考虑开发体验，接受相对较新的技术栈\r\n\r\n#### 3. **IPC 路由系统的自动化类型生成**\r\n\r\n**决策原因**:\r\n\r\n- 消除手动维护类型定义的错误风险\r\n- 提供完整的 IDE 智能提示和类型检查\r\n- 简化 API 调用，提高开发效率\r\n- 支持重构时的自动类型更新\r\n\r\n**实现方式**: 使用 ts-morph 分析源码并生成类型定义\r\n**权衡**: 增加构建复杂度，获得类型安全和开发体验提升\r\n\r\n#### 4. **Pinia 状态管理选择**\r\n\r\n**决策原因**:\r\n\r\n- Vue 3 官方推荐的状态管理解决方案\r\n- 更好的 TypeScript 支持和类型推导\r\n- Composition API 风格，与 Vue 3 一致\r\n- 更小的打包体积和更好的 Tree-shaking\r\n\r\n**考虑的替代方案**: Vuex 4, Zustand\r\n**权衡**: 选择官方支持和长期维护保证\r\n\r\n#### 5. **插件系统架构设计**\r\n\r\n**决策原因**:\r\n\r\n- 提供可扩展性，支持第三方开发\r\n- 沙盒化插件执行，确保安全性\r\n- 标准化插件 API，降低开发门槛\r\n- 动态加载机制，支持按需安装\r\n\r\n**架构选择**: 基于 Electron 的多进程隔离\r\n**权衡**: 增加系统复杂度，获得安全性和扩展性\r\n\r\n## Known Limitations\r\n\r\n### 技术债务和限制\r\n\r\n#### 1. **应用体积较大**\r\n\r\n**影响**: Electron 应用包含完整的 Chromium 运行时，基础体积约 100-150MB\r\n**未来解决方案**:\r\n\r\n- 考虑 Tauri 等更轻量级的替代方案\r\n- 优化依赖包，移除不必要的库\r\n- 使用代码分割和懒加载技术\r\n\r\n#### 2. **内存使用相对较高**\r\n\r\n**影响**: 多进程架构和 Chromium 运行时导致内存占用较高\r\n**现状原因**: Electron 架构特性，为了跨平台兼容性的权衡\r\n**优化计划**:\r\n\r\n- 实现内存使用监控和优化\r\n- 优化插件加载策略\r\n- 考虑进程复用机制\r\n\r\n#### 3. **安全模型复杂性**\r\n\r\n**影响**: Context Isolation 和 IPC 安全配置增加开发复杂度\r\n**现状原因**: Electron 安全最佳实践要求\r\n**改进方向**:\r\n\r\n- 提供更完善的安全配置模板\r\n- 自动化安全检查工具\r\n- 简化安全配置的开发体验\r\n\r\n#### 4. **插件系统的沙盒限制**\r\n\r\n**影响**: 插件能力受到沙盒环境限制，某些系统 API 不可用\r\n**设计权衡**: 安全性优先，限制插件的系统访问能力\r\n**未来扩展**:\r\n\r\n- 提供更丰富的受控 API\r\n- 分级权限管理系统\r\n- 用户可控的权限授权机制\r\n\r\n#### 5. **跨平台样式一致性**\r\n\r\n**影响**: 不同操作系统的原生样式差异可能影响用户体验\r\n**现状处理**: 使用 TailwindCSS 统一样式系统\r\n**持续改进**:\r\n\r\n- 平台特定的样式适配\r\n- 原生控件集成\r\n- 无障碍访问性改进\r\n",
  "fileStats": {
    "size": 15853,
    "lines": 474,
    "lastModified": "2025-09-27T03:28:46.897Z"
  },
  "comments": []
}