{
  "id": "snapshot_1758944913333_0en4y4wrm",
  "approvalId": "approval_1758944757070_abm76mzhb",
  "approvalTitle": "窗口管理重构 - 设计文档",
  "version": 2,
  "timestamp": "2025-09-27T03:48:33.333Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# 设计文档\r\n\r\n## 概述\r\n\r\n窗口管理重构将采用 Electron 原生的 BaseWindow 和 WebContentsView API 替换当前的自定义拖拽和窗口管理系统。新设计将创建一个分层架构，其中主窗口包含固定的搜索头部区域和动态的内容区域，内容区域通过 WebContentsView 实现快速切换和高效管理。\r\n\r\n核心设计理念是**组合优于继承**，通过 WebContentsView 的组合实现多样化的窗口布局，同时保持代码的简洁性和可维护性。\r\n\r\n## 指导文档对齐\r\n\r\n### 技术标准 (tech.md)\r\n\r\n本设计遵循项目的技术标准：\r\n\r\n- **TypeScript 5.9.2**：所有新代码使用 TypeScript 实现类型安全\r\n- **模块化多进程架构**：保持主进程和渲染进程的清晰分离\r\n- **IPC 通信架构**：利用现有的类型安全 IPC 路由系统\r\n- **分层架构模式**：遵循现有的服务层、IPC 层、UI 层分离原则\r\n\r\n### 项目结构 (structure.md)\r\n\r\n新组件将按照现有的目录结构组织：\r\n\r\n- **主进程**：在 `src/main/config/` 下创建新的窗口管理器\r\n- **渲染进程**：在 `src/renderer/src/core/window/` 下创建窗口管理组件\r\n- **类型定义**：在 `src/renderer/src/typings/` 下定义相关类型\r\n- **IPC 路由**：扩展 `src/main/ipc-router/modules/window.ts`\r\n\r\n## 代码复用分析\r\n\r\n### 要利用的现有组件\r\n\r\n- **WindowManager (window-manager.ts)**：扩展现有的窗口管理器以支持 BaseWindow\r\n- **IPC 路由系统**：利用现有的类型安全 IPC 通信机制\r\n- **SearchHeader 组件**：保留并增强现有的搜索头部组件\r\n- **PluginManager**：集成现有的插件管理系统\r\n- **事件系统 (mitt)**：利用现有的事件发射器进行组件通信\r\n\r\n### 集成点\r\n\r\n- **现有窗口系统**：平滑迁移现有的 BrowserWindow 到 BaseWindow\r\n- **插件 API**：保持现有插件 API 的兼容性\r\n- **设置系统**：集成现有的设置管理和存储系统\r\n- **快捷键系统**：集成现有的快捷键管理机制\r\n\r\n## 架构\r\n\r\n新的窗口管理系统采用**分层组合架构**，通过以下层次实现功能：\r\n\r\n### 模块化设计原则\r\n\r\n- **单文件职责**：每个文件专注于一个特定的窗口管理功能\r\n- **组件隔离**：创建小而专注的组件而非大型单体文件\r\n- **服务层分离**：分离数据访问、业务逻辑和表现层\r\n- **工具模块化**：将工具函数拆分为专用的单一目的模块\r\n\r\n```mermaid\r\ngraph TD\r\n    A[BaseWindow 主窗口] --> B[搜索头部区域 - 固定]\r\n    A --> C[内容区域 - 动态]\r\n    C --> D[WebContentsView - 设置]\r\n    C --> E[WebContentsView - 插件]\r\n    C --> F[WebContentsView - 搜索结果]\r\n\r\n    G[新 WindowManager] --> H[ViewManager]\r\n    G --> I[LifecycleManager]\r\n    G --> J[DetachManager]\r\n\r\n    H --> D\r\n    H --> E\r\n    H --> F\r\n\r\n    K[Alt+D 分离] --> L[独立 BaseWindow]\r\n    L --> M[控制栏区域]\r\n    L --> N[插件内容区域]\r\n```\r\n\r\n## 组件和接口\r\n\r\n### NewWindowManager\r\n\r\n- **用途**：统一管理所有窗口和视图的生命周期\r\n- **接口**：\r\n  - `createMainWindow(): BaseWindow`\r\n  - `showView(type: ViewType, path?: string): Promise<void>`\r\n  - `hideView(type: ViewType): Promise<void>`\r\n  - `detachView(viewId: string): Promise<BaseWindow>`\r\n  - `cleanup(): Promise<void>`\r\n- **依赖**：ViewManager, LifecycleManager, DetachManager\r\n- **复用**：扩展现有的 WindowManager 类\r\n\r\n### ViewManager\r\n\r\n- **用途**：管理 WebContentsView 的创建、切换和布局\r\n- **接口**：\r\n  - `createView(type: ViewType, config: ViewConfig): WebContentsView`\r\n  - `switchToView(viewId: string): Promise<void>`\r\n  - `removeView(viewId: string): Promise<void>`\r\n  - `getActiveView(): WebContentsView | null`\r\n- **依赖**：无\r\n- **复用**：利用现有的视图配置逻辑\r\n\r\n### LifecycleManager\r\n\r\n- **用途**：管理视图的生命周期策略（前台/后台）\r\n- **接口**：\r\n  - `setLifecycleStrategy(viewId: string, strategy: LifecycleStrategy): void`\r\n  - `handleViewClose(viewId: string): Promise<void>`\r\n  - `cleanupBackgroundViews(): Promise<void>`\r\n  - `pauseView(viewId: string): Promise<void>`\r\n  - `resumeView(viewId: string): Promise<void>`\r\n- **依赖**：ViewManager\r\n- **复用**：集成现有的插件生命周期逻辑\r\n\r\n### DetachManager\r\n\r\n- **用途**：处理视图分离到独立窗口的逻辑\r\n- **接口**：\r\n  - `detachView(view: WebContentsView): Promise<BaseWindow>`\r\n  - `createDetachedWindow(config: DetachedWindowConfig): BaseWindow`\r\n  - `handleDetachedWindowClose(windowId: number): Promise<void>`\r\n- **依赖**：ViewManager\r\n- **复用**：参考 `参考.js` 中的分离逻辑\r\n\r\n### SearchHeaderManager\r\n\r\n- **用途**：管理搜索头部区域的功能和状态\r\n- **接口**：\r\n  - `initialize(container: HTMLElement): void`\r\n  - `setDraggable(enabled: boolean): void`\r\n  - `showSearchResults(results: SearchResult[]): void`\r\n  - `clearSearch(): void`\r\n- **依赖**：现有的搜索系统\r\n- **复用**：扩展现有的 SearchHeader 组件\r\n\r\n### BaseWindowController\r\n\r\n- **用途**：控制 BaseWindow 的创建和基本属性\r\n- **接口**：\r\n  - `createMainWindow(config: MainWindowConfig): BaseWindow`\r\n  - `createDetachedWindow(config: DetachedWindowConfig): BaseWindow`\r\n  - `setWindowBounds(window: BaseWindow, bounds: Rectangle): void`\r\n- **依赖**：现有的窗口配置系统\r\n- **复用**：集成现有的窗口管理逻辑\r\n\r\n## 数据模型\r\n\r\n### ViewConfig\r\n\r\n```typescript\r\ninterface ViewConfig {\r\n  id: string;\r\n  type: ViewType; // 'settings' | 'plugin' | 'search'\r\n  path?: string; // 插件路径，用于唯一标识\r\n  url?: string; // 要加载的 URL\r\n  bounds: Rectangle; // 视图边界\r\n  lifecycle: LifecycleStrategy; // 生命周期策略\r\n  preload?: string; // 预加载脚本路径\r\n  webSecurity?: boolean; // Web 安全设置\r\n}\r\n```\r\n\r\n### LifecycleStrategy\r\n\r\n```typescript\r\ninterface LifecycleStrategy {\r\n  type: \"foreground\" | \"background\"; // 前台或后台策略\r\n  persistOnClose: boolean; // 关闭时是否保持\r\n  maxIdleTime?: number; // 最大空闲时间（毫秒）\r\n  memoryThreshold?: number; // 内存阈值（MB）\r\n}\r\n```\r\n\r\n### DetachedWindowConfig\r\n\r\n```typescript\r\ninterface DetachedWindowConfig {\r\n  title: string;\r\n  bounds: Rectangle;\r\n  sourceViewId: string;\r\n  showControlBar: boolean;\r\n  parentWindowId?: number;\r\n  metadata?: PluginMetadata;\r\n}\r\n```\r\n\r\n### ViewState\r\n\r\n```typescript\r\ninterface ViewState {\r\n  id: string;\r\n  type: ViewType;\r\n  isActive: boolean;\r\n  isVisible: boolean;\r\n  isDetached: boolean;\r\n  lastAccessTime: number;\r\n  memoryUsage?: number;\r\n  lifecycle: LifecycleStrategy;\r\n}\r\n```\r\n\r\n### MainWindowLayout\r\n\r\n```typescript\r\ninterface MainWindowLayout {\r\n  headerHeight: number; // 搜索头部高度\r\n  contentBounds: Rectangle; // 内容区域边界\r\n  totalBounds: Rectangle; // 整个窗口边界\r\n  padding: number; // 内边距\r\n}\r\n```\r\n\r\n## 错误处理\r\n\r\n### 错误场景\r\n\r\n1. **WebContentsView 创建失败**\r\n   - **处理**：回退到 BrowserWindow 模式，记录错误日志\r\n   - **用户影响**：显示降级模式提示，功能基本可用\r\n\r\n2. **插件加载失败**\r\n   - **处理**：显示错误消息，提供重试选项，清理资源\r\n   - **用户影响**：显示\"插件加载失败\"消息，可以重试或跳过\r\n\r\n3. **视图切换失败**\r\n   - **处理**：回滚到之前的视图状态，记录错误\r\n   - **用户影响**：保持当前视图，显示切换失败提示\r\n\r\n4. **窗口分离失败**\r\n   - **处理**：保持视图在主窗口中，显示错误消息\r\n   - **用户影响**：Alt+D 操作无效，显示\"分离失败\"提示\r\n\r\n5. **内存不足**\r\n   - **处理**：自动清理后台视图，强制垃圾回收\r\n   - **用户影响**：后台插件可能被关闭，显示内存清理提示\r\n\r\n## 测试策略\r\n\r\n### 单元测试\r\n\r\n- **NewWindowManager**：测试窗口创建、切换、关闭逻辑\r\n- **ViewManager**：测试视图创建、切换、布局计算\r\n- **LifecycleManager**：测试生命周期策略执行\r\n- **DetachManager**：测试视图分离和窗口创建\r\n\r\n### 集成测试\r\n\r\n- **窗口-视图集成**：测试 BaseWindow 与 WebContentsView 的协作\r\n- **插件集成**：测试插件加载、显示、关闭流程\r\n- **快捷键集成**：测试 Alt+D 分离功能\r\n- **IPC 集成**：测试主进程与渲染进程的通信\r\n\r\n### 端到端测试\r\n\r\n- **用户工作流**：搜索 → 选择插件 → 使用插件 → 关闭/分离\r\n- **多插件切换**：在多个插件间快速切换\r\n- **设置访问**：打开设置、修改配置、保存并关闭\r\n- **分离窗口管理**：分离插件、操作分离窗口、关闭分离窗口\r\n",
  "fileStats": {
    "size": 8750,
    "lines": 259,
    "lastModified": "2025-09-27T03:46:16.922Z"
  },
  "comments": []
}